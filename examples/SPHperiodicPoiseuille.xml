<!-- Minimal weakly compressible SPH-simulation of Poiseuille flow.

Note that further documentation can be found above many of the modules used below. For References such as [1] see the end of this file.
    
    Note that the setup below is "minimal" in the following sense: Minimal particle resolution, minimal effort for implementing boundary conditions, no stabilisation mechanisms such as artificial viscosity or other. Any improvement of the above or other aspects will lead to improved accuracy and prolonged stablity.
    
    Further note that you should create the subdirectories grid, pos and posFrozen before running the simulation. The directories must be created in the directory where you issue the command to run the simulation.
    
    The simulation-box has cuboid shape (for sizes see module BoundaryCuboid) with periodic boundary conditions in y-direction and in z-direction. In x-direction, at x=0 and at x=boxX (for value of boxX seemodule BoundaryCuboid), there is a wall with assumed no-slip boundary condition for the velocity (vx=vy=vz=0), which is implemented by the module DirichletBCVels and one of the modules FPairVelsWF (see below). 

For the fluid, approximate properties of water are taken. The units used in the simulation are:

- length: [l] = lcross/lcrossSPH ~ 2.95e-4 m
where lcross = 1.00e-3 m is the length of the simulated channel cross-section in SI-units and lcrossSPH ~ 3.38 is the chosen same length in the SPH-unit [l]. See attribute boxX in module BoundaryCuboid below, where also the requirements for the choice of boxX are mentioned.

- mass: [m] = [rho]*[l]^3 = (rho/rhoSPH)*[l]^3 ~ 1.47e-9 kg 
where [rho] is the unit of mass density, rho = 1000 kg/m^3 is the real density, and rhoSPH = 2.6^3 = 17.576 is the chosen same density in the SPH-unit [rho] ~ 56.90 kg/m^3  

- time: [t] = [m]/([l]*[eta]) = [m]*etaSPH/([l]*eta) ~ 4.97e-3 s
where [eta] is the unit of shear viscosity, eta = 1e-3 Pa s is the real shear viscosity, and etaSPH = 1 is the chosen same shear visosity in the SPH-unit [eta] = eta.

-->


<Simulation
    simName = "Poiseuille"
    inputFromResults = "1"
    wtDistEps = "-1e-10"
    >
  
  <!--M5-Spline implemented "by hand". "Lucy" (also 4th order) is currently (2016-12-11) the only hard-coded interpolation function which is useful for SPH, but it is usually inferior to M5. As you can see, the strategy in this input file is to set the cutoff to 1. An alternative strategy is to set it to 2, 2.5, 3 for the M4, M5, M6 (3rd, 4th, 5th order), respectively. Reasonable particle distances/densities or the normalisation of the interpolants will for example depend on this choice. The attribute 'selfContribution' and the prefactor in 'weight' contain the normalisation.-->
  <InputWF
      cutoff = "1"
      interpolation = "(step(r)-step(r-0.2))*(1-(150/23)*r^2+(375/23)*r^4)+(step(r-0.2)-step(r-0.6))*(2/23)*(11-5*r*(-2+5*r*(6+5*r*(r-2))))+step(r-0.6)*(125/46)*(r-1)^4"
      selfContribution = "2875/(256*pi)"
      weight = "(15625/(1024*pi))*((step(r)-step(r-0.2))*48*(0.2-r^2)+(step(r-0.2)-step(r-0.6))*(19.2-0.64/r-48*r+32*r^2)+step(r-0.6)*(-8*(r-1)^3)/r)"
      name = "M5"
      />

  <!--
      The number of timesteps ("100000") is currently chosen such that one can see the onset of instabilities (starting roughly at timestep 66000 ~ 1.6 s). Even at timestep 300000 (~ 7.5 s), the simulation is still running and the velocities are still in the right order of magnitude, but one observes significant oscillating deviations from the expected parabolic velocity profile. 
      The size of the timestep dt = "0.005" is limited in this simulation (Reynolds-number ~ 7) by the CFL-condition dt <~ 0.25*d/c ~ 0.0081*[t] [1]. For further limitations (not dominating here), see [1,2]. The factor 0.25 is approximate and empirical. It varies slightly depending on the specific SPH-setup (e.g. kernel, cutoff). d=(rho/m)^(-1/3), i.e., the distance of nearest neighbours in a cubic lattice, is here chosen as the characteristic disretisation length. Other groups do that differently, but the order of magnitude is the same. c is the chosen artificial speed of sound. See the pressure gradient term below for more details about c.
  -->
  <Controller
      timesteps = "100000"
      dt = "0.005"
      >

    <!-- Besides time-integration, Integrators also introduce a species. lambda="1" gives a predictor-corrctor integration suitable for SPH with integrated density "n".-->
    <IntegratorVelocityVerlet
        species="fluid"
        lambda = "1"
        />

    <!-- The usage of the following two Integrators means that we are integrating the continuity equation for the local density 'n' in time (as opposed to the SPH-summation approach) [1]. In fact, for species wall, nothing is integrated because there are no free particles of this species. This Integrator just introduces the species and the scalar "n".-->
    <IntegratorScalarLambda
        species = "fluid"
        lambda = "1"
        scalar = "n"
        symbol = "n"
        />
    <IntegratorScalarLambda
        species = "wall"
        lambda = "1"
        scalar = "n"
        symbol = "n"
        />
         
  </Controller>

  <!-- This commented out module would perform the alternative summation approach for the density [1] -->
  <!--
      <ValCalculatorRho
      species1="fluid"
      species2="fluid"
      symbol="n"
      weightingFunction="M5"
      allPairs="yes"
      />
  -->

  <!-- Computes the symbol 'F' which is usually used as 'Fij' below. As the name indicates, Fij = -(dW(rij)/drij)/rij -->
  <ValCalculatorNegDKernelDivr
      allPairs = "yes"
      symbol = "F"
      weightingFunction="M5"
      />

  <!-- This provides the symbol with default name 'vBC' (usable as 'vBCij' in pair expressions), which allows to enforce no-slip boundary conditions by replacing the velocity of the wall-particle with this one. The word 'Dirichlet' is a bit misleading and too general. For each pair of fluid and wall particles, 'vBC' is an extrapolation of the fluid-particle velocity onto the wall particle, such that the velocity at the intersection-point of the line connecting the two particles with the wall is zero. -->
  <DirichletBCVels
      wallSpecies = "wall"
      species1 = "fluid"
      species2 = "wall"
      />
  
  <!-- Right hand side (RHS) of discretised continuity equation [1]. This module multiplies the pairFactor internally with Fij. -->
  <FPairScalar
      species1 = "fluid"
      species2 = "fluid"
      pairFactor = "-([vi]-[vj]):[rij]"
      weightingFunction = "M5"
      symmetry = "1"
      scalar = "n"
      />
  
  <!-- Continuity equation for fluid-wall interactions. No clean boundary condition is implemented here besides the same no-slip model as for the viscous forces below. -->
  <FPairScalar
      species1 = "fluid"
      species2 = "wall"
      particleFactor_i = "-([vi]-[vBCij]):[rij]"
      particleFactor_j = "0"
      weightingFunction = "M5"
      symmetry = "1"
      scalar = "n"
      />
  
  <!-- Viscous forces with viscosity eta=1-->
  <FPairVelsWF
      species1 = "fluid"
      species2 = "fluid"
      pairFactor = "-2*1*([vi]-[vj])/(ni*nj)"
      weightingFunction = "M5"
      symmetry = "-1"
      />
  
  <!-- Viscous forces with viscosity eta=1 for fluid-wall interactions, imposing no-slip boundary conditions. -->
  <FPairVelsWF
      species1 = "fluid"
      species2 = "wall"
      particleFactor_i = "-2*1*([vi]-[vBCij])/(nj*nj)"
      particleFactor_j = "idVec(0)"
      weightingFunction = "M5"
      symmetry = "1"
      />
  
  <!-- Pressure gradient forces for weakly compressible SPH. We use here for the pressure the linear artificial equation of state P = c^2*(rho-rho0), where c is the artificial speed of sound and rho_0 = 17.576 is the equilibrium density. This choice is not typical but possible and does not make a huge difference to the usual (also artificial) choice P = P0*((rho/rho0)^7-1) with P0 = c^2*rho0/7. In both cases, c^2 must be chosen as

c^2 = max[v0^2, eta*v0/(boxX*rho0), a*boxX]/deltaRho ~ 141.29*[l]^2/[t]^2,

where we choose for the maximum allowed flow velocity v0 = 0.1 m/s ~ 1.68*[l]/[t], the used acceleration in the external pressure gradient term below is a = 0.05*[l]/[t]^2, and we choose deltaRho = 0.02 as the maximum allowed density fluctuation in the weakly compressible SPH approach [1]. -->
  <FPairVelsWF
      species1 = "fluid"
      species2 = "fluid"
      pairFactor = "(141.29)*((ni-17.576)/(ni*ni)+(nj-17.576)/(nj*nj))*[rij]"
      weightingFunction = "M5"
      />
  
  <!-- Pressure gradient forces for fluid-wall interactions. No clean boundary condition is implemented here. the wall particle acts here always as a fluid particle with equilibrium density. Hence the second term should in fact vanish. An alternative would be to assign the properties of the fluid particle to the wall particle. This would be an approximate but not exact mirror boundary condition (MBC). Exact MBCs are not yet implemented but shouldn't be very difficult. -->
  <FPairVelsWF
      species1 = "fluid"
      species2 = "wall"
      pairFactor = "(141.29)*((ni-17.576)/(ni*ni)+(nj-17.576)/(nj*nj))*[rij]"
      weightingFunction = "M5"
      />

  <!-- Body-force on each particle, which is equivalent to an externally applied constant pressure gradient -->
  <FParticleVels
      species = "fluid"
      expression = "uVecY(0.005)"
      />
  
  <Phase
      smartCells = "0"
      >
    <LinkedListCreator/>
    
    <!-- We try 8 particles in the cross-section: It has been tested, e.g., in Phys. Rev. E 67 (2003) 026705, that >=6 cutoffs are required to resolve a given wavelength properly. If we approximate the expected parabolic velocity profile of Poiseuille flow by a half-wave, then we need >=3cutoffs = 3. For our choice of 2.6 particles per cutoff (in a simple cubic lattice), this means that we need 3x2.6=7.8, i.e. a minimum of 8 particles. The box-sizes result from that. In y-direction and in z-direction, they just result from the periodicity. In z-direction, we take the absolute minimum of >= 2 cutoffs such that the particles don't see their periodic image. In the laminar regime, all particles in z-direction should behave the same (periodic) way. In the simulation this is true as long as no instabilities occur.
	 In x-direction, we additionally enforce, that the wall particles on the "left" and on the "right" have equal distance to the wall-boundary. This is currently a bit cumbersome since the wall particles are created (in a cubic lattice), by extending the bounding box by 1 cutoff beyond each wall and then starting with the first wall particle at 0.5*d from the "lower end" of the bounding box. Only for cutoffs which are multiples of 0.5*d, this does not require any manual adjustment. But here we have a nearest particle-distance in a cubic lattice of d = 1/2.6. In fact, this even complicates the adjustment of the channel width in real units (see above for units). Therefore, the TODO-list for the SYMPLER-code already contains a simplification of this issue.-->
    <BoundaryCuboid
        boxX = "3.3846153846153837"
        boxY = "3.076923077"
        boxZ = "2.3076923077"
        periodicX = "no"
        periodicY = "yes"
        periodicZ = "yes"
        >

      <!-- This is a hard reflection of the particles from the walls, which is always defined, but should (hopefully) not play a major role in our simulation. Here, the outgoing angle of the reflected particle is simply equal to the incoming one.-->
      <ReflectorMirror/>

      <!-- This creates the fluid particles on a simple-cubic lattice. The 'density' is 2.6^3=17.576 and is used for placing the particles with a lattice constant of d=1/2.6. Masses of the particles are m=1 in the used units. u, v, w are the initial velocities of all particles. They should be explicitly set to 0 here, because the default is velocities drawn from Maxwell-Boltzmann at temperature=1; not useful in a SPH-discretisation of non-fluctuating Navier-Stokes. Initial values (here for n, consistent with 'density') are set here.-->
      <ParticleCreatorLattice
          species = "fluid"
          density = "17.576"
          n = "17.576"
          u = "0"
          v = "0"
          w = "0"
          />

      <!-- Wall particles on a simple-cubic lattice outside the walls and within a range of 1cutoff to at least one wall segment.-->
      <ParticleCreatorWall
          density = "17.576"
          species = "wall"
          n = "17.576"
          />
      
    </BoundaryCuboid>
    
  </Phase>

  <!-- This Meter measures quantities (defined by its sub-modules) averaged over the whole domain. This is especially useful for debugging, stability and convergence checks. -->
  <MeterAverage
     measureEvery = "50"
     >

    <!-- To measure the (kinetic) temperature is not very useful. But this module also spills out some additional info related to the velocities, namely a mean flow velocity.-->
    <Temperature species = "fluid"/>
    <Scalar symbol = "n" species = "fluid"/>
    <!-- This sub-module is for writing out what was measured by the previous sub-modules. Sub-directories must already exist! Already existing files will be over-written!-->
    <OutputFile nameOutputFile = "sim.dat" multipleFiles = "no"/>
    
  </MeterAverage>

  <!-- This Meter can measure in sub-regions as defined by nX, nY, nZ. Here, we are interested in "slicing" the x-direction, i.e., the flow cross-section. Unfortunately, the whole bounding box is sliced, including the domain of 1cutoff beyond the walls with the wall particles. This produces some zeroes for the first and last slices (here 3+3) and makes the exact location, to which the measured values should be associated, more difficult to determine. This is especially true for the innermost non-zero value, since simple averaging by summation is perfomed, and since this specific slice is partially out of the walls.-->
  <GridAveragerStructured
     nX = "14"
     nY = "1"
     nZ = "1"
     measureEvery = "500"
     >
    
    <Velocity species = "fluid"/>

    <Scalar symbol = "n" species = "fluid"/>

    <!-- The names of the columns of the measurements are auto-generated by the Meter. The "^1" stands for the moment, i.e., here the first, i.e., the average (can be changed in the sub-module 'Scalar'). -->
    <OutputFile nameOutputFile = "grid/vels.dat" multipleFiles = "yes"  columns = "fluid_velocity_mean|fluid_n^1"/>

   </GridAveragerStructured>

   <!-- This Meter tries to write out as much information as possible, which is stored for each particle.-->
   <MeterPosVel measureEvery = "500" species = "fluid" withFrozen = "no">

     <!-- Generates a file which you can, e.g., view with Paraview -->
     <OutputVTK nameOutputFile = "pos/pos.vtk" format = "ascii"/>

   </MeterPosVel>

   <!-- Here we just want one snapshot of the frozen, i.e., never changing particles. Hence the huge 'measureEvery'. -->
   <MeterPosVel measureEvery = "1000000000" species = "wall" withFrozen = "yes">
     
     <OutputVTK nameOutputFile = "posFrozen/pos.vtk" format = "ascii"/>
     
   </MeterPosVel>
   
 </Simulation>

 <!-- References:

[1]: J. J. Monaghan, Annu. Rev. Astron. Astrophys. 30, 543 (1992).
[2]: P. W. Cleary, Applied Mathematical Modelling 22, 981 (1998).

 -->
